syntax = "proto3";

package ai.verta.modeldb.versioning;
option go_package = "github.com/VertaAI/modeldb/protos/gen/go/protos/public/modeldb/versioning";

option java_multiple_files = true;

import "google/api/annotations.proto";
import "protos/public/modeldb/CommonService.proto";
import "protos/public/modeldb/versioning/Dataset.proto";

// Base commit for the versioning system
message Commit {
    repeated string parent_ids = 1; // ID of the parent commits
    CommitContent content = 2;      // Content of the commit
    string tree_id = 3;             // ID of the root tree for the commit
}

message CommitContent {
    string message = 1; // Message associated with the commit
    uint64 date_created = 2;
    string author = 3;
}

message TreeElement {
    string id = 1;
    string name = 2;
}

message Tree {
    repeated TreeElement blobs = 1;    // Blobs, which correspond to direct entries/files
    repeated TreeElement subtrees = 2; // Subtrees, which correspond to subfolders
}

message Blob {
    oneof content {
        DatasetBlob dataset = 1; // Blob of the type dataset
    }
}

message BlobExpanded {
    string path = 1; // Expand with the path seen so far through the tree to get to this blob
    Blob blob = 2;
}

message BlobDiff {
    string path = 1; // Expand with the path seen so far through the tree to get to this blob
    oneof content {
        DatasetDiff dataset = 2; // Blob of the type dataset
    }
}

message Entity {
    // ID of the entity. Computed as the hash of all fields, excluding this field.
    // NOTE: be careful: maps must be hashed in the same order every time
    string sha = 1;

    oneof content {
        Commit commit = 2;
        Tree tree = 3;
        Blob blob = 4;
    }
}

message Repository {
    uint64 id = 1;
    string name = 2; // Name that can be used in URL, like in GitHub
    uint64 date_created = 3;
    uint64 date_updated = 4;

    string workspace_id = 5;
    WorkspaceTypeEnum.WorkspaceType workspace_type = 6;
}

// For pagination
message Pagination {
    int32 page_number = 2;
    int32 page_limit = 3;
}

// CRUD for repositories
message RepositoryNamedIdentification {
    string name = 1;
    string workspace_name = 2;
}

message RepositoryIdentification {
    oneof id {
        RepositoryNamedIdentification named = 1;
        uint64 code = 2;
    }
}

message ListRepositoriesRequest {
    string workspace_name = 1;
    Pagination pagination = 2;

    message Response {
        repeated Repository repository = 1;
    }
}

message GetRepositoryRequest {
    RepositoryIdentification id = 1;

    message Response {
        Repository repository = 1;
    }
}

message SetRepository {
    RepositoryIdentification id = 1;
    Repository repository = 2;

    message Response {
        Repository repository = 1;
    }
}

message DeleteRepositoryRequest {
    RepositoryIdentification id = 1;

    message Response {
    }
}

// CRUD for entities
message BatchGetEntity {
    repeated string shas = 1;
    RepositoryIdentification repository_id = 2;

    message Response {
        repeated Entity entities = 1;
    }
}

message AddEntityRequest {
    // If SHA is not empty, verify before adding the corresponding entry to avoid corruption
    // If empty, compute it
    Entity entity = 1;
    RepositoryIdentification repository_id = 2;

    message Response {
        string sha = 1;
    }
}

message DeleteEntityRequest {
    string sha = 1;
    RepositoryIdentification repository_id = 2;

    message Response {
    }
}

// Commit operations
message ListCommitsRequest {
    RepositoryIdentification repository_id = 1;
    Pagination pagination = 2;

    string commit_base = 3; // If empty, consider commits from the beginning
    string commit_head = 4; // If empty, consider commits from the base to the latest
    string glob_path_prefix = 5;

    message Response {
        repeated Commit commits = 1;
    }
}

message ListCommitBlobsRequest {
    RepositoryIdentification repository_id = 1;
    Pagination pagination = 2;
    string commit_sha = 3;
    string glob_path_prefix = 4;

    message Response {
        repeated BlobExpanded blobs = 1;
    }
}

message CreateCommitRequest {
    RepositoryIdentification repository_id = 1;
    repeated string parent_ids = 2;
    CommitContent content = 3;
    repeated BlobExpanded blobs = 4;

    message Response {
        Commit commit = 1;
    }
}

// Git-like operations
message ComputeRepositoryDiffRequest {
    RepositoryIdentification repository_id = 1;
    string commit_a = 2;
    string commit_b = 3;
    string glob_path_prefix = 4;

    message Response {
        repeated BlobDiff diffs = 1;
    }
}

// CRUD for tags
// Tags, like in git, are unique
message ListTagsRequest {
    RepositoryIdentification repository_id = 1;

    message Response {
        repeated string tags = 1;
    }
}

message GetTagRequest {
    RepositoryIdentification repository_id = 1;
    string tag = 2;

    message Response {
        Commit commit = 1;
    }
}

message SetTagRequest {
    RepositoryIdentification repository_id = 1;
    string tag = 2;
    string commit_sha = 3;

    message Response{
    }
}

message DeleteTagRequest {
    RepositoryIdentification repository_id = 1;
    string tag = 2;

    message Response{
    }
}

service VersioningService {
    // CRUD for repositories
    rpc ListRepositories(ListRepositoriesRequest) returns (ListRepositoriesRequest.Response) {
        option (google.api.http) = {
            get: "/v1/versioning/workspaces/{workspace_name}/repositories"
            additional_bindings {
                get: "/v1/versioning/repositories"
            }
        };
    };

    rpc GetRepository(GetRepositoryRequest) returns (GetRepositoryRequest.Response) {
        option (google.api.http) = {
            get: "/v1/versioning/workspaces/{id.named.workspace_name}/repositories/{id.named.name}"
            additional_bindings {
                get: "/v1/versioning/repositories/{id.code}"
            }
        };
    };

    rpc CreateRepository(SetRepository) returns (SetRepository.Response) {
        option (google.api.http) = {
            post: "/v1/versioning/workspaces/{id.named.workspace_name}/repositories"
            body: "repository"
        };
    }

    rpc UpdateRepository(SetRepository) returns (SetRepository.Response) {
        option (google.api.http) = {
            put: "/v1/versioning/workspaces/{id.named.workspace_name}/repositories/{id.named.name}"
            body: "repository"
            additional_bindings {
                put: "/v1/versioning/repositories/{id.code}"
                body: "repository"
            }
        };
    }

    rpc DeleteRepository(DeleteRepositoryRequest) returns (DeleteRepositoryRequest.Response) {
        option (google.api.http) = {
            delete: "/v1/versioning/workspaces/{id.named.workspace_name}/repositories/{id.named.name}"
            additional_bindings {
                delete: "/v1/versioning/repositories/{id.code}"
            }
        };
    }

    // CRUD for entities
    rpc GetEntities(BatchGetEntity) returns (BatchGetEntity.Response) {
        option (google.api.http) = {
            get: "/v1/versioning/workspaces/{repository_id.named.workspace_name}/repositories/{repository_id.named.name}/entities"
            additional_bindings {
                get: "/v1/versioning/repositories/{repository_id.code}/entities"
            }
        };
    }

    rpc CreateEntity(AddEntityRequest) returns (AddEntityRequest.Response) {
        option (google.api.http) = {
            post: "/v1/versioning/workspaces/{repository_id.named.workspace_name}/repositories/{repository_id.named.name}/entities"
            body: "entity"
            additional_bindings {
                put: "/v1/versioning/repositories/{repository_id.code}/entities"
                body: "entity"
            }
        };
    }

    rpc SetEntity(AddEntityRequest) returns (AddEntityRequest.Response) {
        option (google.api.http) = {
            put: "/v1/versioning/workspaces/{repository_id.named.workspace_name}/repositories/{repository_id.named.name}/entities/{entity.sha}"
            body: "entity"
            additional_bindings {
                put: "/v1/versioning/repositories/{repository_id.code}/entities/{entity.sha}"
                body: "entity"
            }
        };
    }

    rpc DeleteEntity(DeleteEntityRequest) returns (DeleteEntityRequest.Response) {
        option (google.api.http) = {
            delete: "/v1/versioning/workspaces/{repository_id.named.workspace_name}/repositories/{repository_id.named.name}/entities/{sha}"
            additional_bindings {
                delete: "/v1/versioning/repositories/{repository_id.code}/entities/{sha}"
            }
        };
    }

    // Commit operations
    rpc ListCommits(ListCommitsRequest) returns (ListCommitsRequest.Response) {
        option (google.api.http) = {
            get: "/v1/versioning/workspaces/{repository_id.named.workspace_name}/repositories/{repository_id.named.name}/commits"
            additional_bindings {
                get: "/v1/versioning/repositories/{repository_id.code}/commits"
            }
        };
    }

    rpc ListCommitBlobs(ListCommitBlobsRequest) returns (ListCommitBlobsRequest.Response) {
        option (google.api.http) = {
            get: "/v1/versioning/workspaces/{repository_id.named.workspace_name}/repositories/{repository_id.named.name}/commits/{commit_sha}/blobs"
            additional_bindings {
                get: "/v1/versioning/repositories/{repository_id.code}/commits/{commit_sha}/blobs"
            }
        };
    }

    rpc CreateCommit(CreateCommitRequest) returns (CreateCommitRequest.Response) {
        option (google.api.http) = {
            post: "/v1/versioning/workspaces/{repository_id.named.workspace_name}/repositories/{repository_id.named.name}/commits"
            body: "*"
            additional_bindings {
                put: "/v1/versioning/repositories/{repository_id.code}/commits"
                body: "*"
            }
        };
    }

    // Git-like operations
    rpc ComputeRepositoryDiff(ComputeRepositoryDiffRequest) returns (ComputeRepositoryDiffRequest.Response) {
        option (google.api.http) = {
            get: "/v1/versioning/workspaces/{repository_id.named.workspace_name}/repositories/{repository_id.named.name}/diff"
            additional_bindings {
                get: "/v1/versioning/repositories/{repository_id.code}/diff"
            }
        };
    }

    // CRUD for tags
    rpc ListTags(ListTagsRequest) returns (ListTagsRequest.Response) {
        option (google.api.http) = {
            get: "/v1/versioning/workspaces/{repository_id.named.workspace_name}/repositories/{repository_id.named.name}/tags"
            additional_bindings {
                get: "/v1/versioning/repositories/{repository_id.code}/tags"
            }
        };
    };

    rpc GetTag(GetTagRequest) returns (GetTagRequest.Response) {
        option (google.api.http) = {
            get: "/v1/versioning/workspaces/{repository_id.named.workspace_name}/repositories/{repository_id.named.name}/tags/{tag}"
            additional_bindings {
                get: "/v1/versioning/repositories/{repository_id.code}/tags/{tag}"
            }
        };
    };

    rpc SetTag(SetTagRequest) returns (SetTagRequest.Response) {
        option (google.api.http) = {
            put: "/v1/versioning/workspaces/{repository_id.named.workspace_name}/repositories/{repository_id.named.name}/tags/{tag}"
            body: "commit_sha"
            additional_bindings {
                put: "/v1/versioning/repositories/{repository_id.code}/tags/{tag}"
                body: "commit_sha"
            }
        };
    }

    rpc DeleteTag(DeleteTagRequest) returns (DeleteTagRequest.Response) {
        option (google.api.http) = {
            delete: "/v1/versioning/workspaces/{repository_id.named.workspace_name}/repositories/{repository_id.named.name}/tags/{tag}"
            additional_bindings {
                delete: "/v1/versioning/repositories/{repository_id.code}/tags/{tag}"
            }
        };
    }
}
